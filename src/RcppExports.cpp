// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/trajeR.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gkBETA_cpp
double gkBETA_cpp(List beta, List phi, int i, int k, IntegerVector nbeta, IntegerVector nphi, NumericMatrix A, NumericMatrix Y, Nullable<NumericMatrix> TCOV, Nullable<List> delta, int nw);
static SEXP _trajeR_gkBETA_cpp_try(SEXP betaSEXP, SEXP phiSEXP, SEXP iSEXP, SEXP kSEXP, SEXP nbetaSEXP, SEXP nphiSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< List >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nphi(nphiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(gkBETA_cpp(beta, phi, i, k, nbeta, nphi, A, Y, TCOV, delta, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_gkBETA_cpp(SEXP betaSEXP, SEXP phiSEXP, SEXP iSEXP, SEXP kSEXP, SEXP nbetaSEXP, SEXP nphiSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_gkBETA_cpp_try(betaSEXP, phiSEXP, iSEXP, kSEXP, nbetaSEXP, nphiSEXP, ASEXP, YSEXP, TCOVSEXP, deltaSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// difLBETA_cpp
NumericVector difLBETA_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, IntegerVector nphi, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOV, int nw);
static SEXP _trajeR_difLBETA_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nphiSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nphi(nphiSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(difLBETA_cpp(param, ng, nx, nbeta, nphi, n, A, Y, X, TCOV, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_difLBETA_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nphiSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_difLBETA_cpp_try(paramSEXP, ngSEXP, nxSEXP, nbetaSEXP, nphiSEXP, nSEXP, ASEXP, YSEXP, XSEXP, TCOVSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// LikelihoodBETA_cpp
double LikelihoodBETA_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, IntegerVector nphi, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOV, int nw);
static SEXP _trajeR_LikelihoodBETA_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nphiSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nphi(nphiSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(LikelihoodBETA_cpp(param, ng, nx, nbeta, nphi, n, A, Y, X, TCOV, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_LikelihoodBETA_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nphiSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_LikelihoodBETA_cpp_try(paramSEXP, ngSEXP, nxSEXP, nbetaSEXP, nphiSEXP, nSEXP, ASEXP, YSEXP, XSEXP, TCOVSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// gkCNORM_cpp
double gkCNORM_cpp(List beta, NumericVector sigma, int i, int k, IntegerVector nbeta, NumericMatrix A, NumericMatrix Y, double ymin, double ymax, Nullable<NumericMatrix> TCOV, Nullable<List> delta, int nw);
static SEXP _trajeR_gkCNORM_cpp_try(SEXP betaSEXP, SEXP sigmaSEXP, SEXP iSEXP, SEXP kSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(gkCNORM_cpp(beta, sigma, i, k, nbeta, A, Y, ymin, ymax, TCOV, delta, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_gkCNORM_cpp(SEXP betaSEXP, SEXP sigmaSEXP, SEXP iSEXP, SEXP kSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_gkCNORM_cpp_try(betaSEXP, sigmaSEXP, iSEXP, kSEXP, nbetaSEXP, ASEXP, YSEXP, yminSEXP, ymaxSEXP, TCOVSEXP, deltaSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// difLbetakalpha_cpp
NumericVector difLbetakalpha_cpp(NumericVector theta, List beta, NumericVector alpha, Nullable<List> delta, int k, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, double ymin, double ymax, Nullable<NumericMatrix> TCOV, int nw);
static SEXP _trajeR_difLbetakalpha_cpp_try(SEXP thetaSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP deltaSEXP, SEXP kSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(difLbetakalpha_cpp(theta, beta, alpha, delta, k, ng, nx, nbeta, n, A, Y, X, ymin, ymax, TCOV, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_difLbetakalpha_cpp(SEXP thetaSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP deltaSEXP, SEXP kSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_difLbetakalpha_cpp_try(thetaSEXP, betaSEXP, alphaSEXP, deltaSEXP, kSEXP, ngSEXP, nxSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, XSEXP, yminSEXP, ymaxSEXP, TCOVSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// difLsigmaalphaunique_cpp
double difLsigmaalphaunique_cpp(NumericVector theta, List beta, NumericVector alpha, Nullable<List> delta, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, double ymin, double ymax, Nullable<NumericMatrix> TCOV, int nw);
static SEXP _trajeR_difLsigmaalphaunique_cpp_try(SEXP thetaSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP deltaSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(difLsigmaalphaunique_cpp(theta, beta, alpha, delta, ng, nx, nbeta, n, A, Y, X, ymin, ymax, TCOV, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_difLsigmaalphaunique_cpp(SEXP thetaSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP deltaSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_difLsigmaalphaunique_cpp_try(thetaSEXP, betaSEXP, alphaSEXP, deltaSEXP, ngSEXP, nxSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, XSEXP, yminSEXP, ymaxSEXP, TCOVSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// difLalpha_cpp
NumericVector difLalpha_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, double ymin, double ymax, Nullable<NumericMatrix> TCOV, int nw, bool ssigma);
static SEXP _trajeR_difLalpha_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP ssigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< bool >::type ssigma(ssigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(difLalpha_cpp(param, ng, nx, nbeta, n, A, Y, X, ymin, ymax, TCOV, nw, ssigma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_difLalpha_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP ssigmaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_difLalpha_cpp_try(paramSEXP, ngSEXP, nxSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, XSEXP, yminSEXP, ymaxSEXP, TCOVSEXP, nwSEXP, ssigmaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// difLalphaunique_cpp
NumericVector difLalphaunique_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, double ymin, double ymax, Nullable<NumericMatrix> TCOV, int nw, bool ssigma);
static SEXP _trajeR_difLalphaunique_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP ssigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< bool >::type ssigma(ssigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(difLalphaunique_cpp(param, ng, nx, nbeta, n, A, Y, X, ymin, ymax, TCOV, nw, ssigma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_difLalphaunique_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP ssigmaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_difLalphaunique_cpp_try(paramSEXP, ngSEXP, nxSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, XSEXP, yminSEXP, ymaxSEXP, TCOVSEXP, nwSEXP, ssigmaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Likelihoodalpha_cpp
double Likelihoodalpha_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, double ymin, double ymax, Nullable<NumericMatrix> TCOV, int nw, bool ssigma);
static SEXP _trajeR_Likelihoodalpha_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP ssigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< bool >::type ssigma(ssigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Likelihoodalpha_cpp(param, ng, nx, nbeta, n, A, Y, X, ymin, ymax, TCOV, nw, ssigma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_Likelihoodalpha_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP ssigmaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_Likelihoodalpha_cpp_try(paramSEXP, ngSEXP, nxSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, XSEXP, yminSEXP, ymaxSEXP, TCOVSEXP, nwSEXP, ssigmaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// likelihoodCNORM_cpp
double likelihoodCNORM_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, double ymin, double ymax, Nullable<NumericMatrix> TCOV, int nw);
static SEXP _trajeR_likelihoodCNORM_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodCNORM_cpp(param, ng, nx, nbeta, n, A, Y, X, ymin, ymax, TCOV, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_likelihoodCNORM_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_likelihoodCNORM_cpp_try(paramSEXP, ngSEXP, nxSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, XSEXP, yminSEXP, ymaxSEXP, TCOVSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// likelihoodEM_cpp
double likelihoodEM_cpp(int n, int ng, IntegerVector nbeta, NumericVector beta, NumericVector sigma, NumericVector pi, NumericMatrix A, NumericMatrix Y, double ymin, double ymax, Nullable<NumericMatrix> TCOV, Nullable<NumericVector> delta, int nw);
static SEXP _trajeR_likelihoodEM_cpp_try(SEXP nSEXP, SEXP ngSEXP, SEXP nbetaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP piSEXP, SEXP ASEXP, SEXP YSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodEM_cpp(n, ng, nbeta, beta, sigma, pi, A, Y, ymin, ymax, TCOV, delta, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_likelihoodEM_cpp(SEXP nSEXP, SEXP ngSEXP, SEXP nbetaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP piSEXP, SEXP ASEXP, SEXP YSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_likelihoodEM_cpp_try(nSEXP, ngSEXP, nbetaSEXP, betaSEXP, sigmaSEXP, piSEXP, ASEXP, YSEXP, yminSEXP, ymaxSEXP, TCOVSEXP, deltaSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ftauxCNORM_cpp
NumericMatrix ftauxCNORM_cpp(NumericVector pi, NumericVector beta, NumericVector sigma, int ng, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, double ymin, double ymax, Nullable<NumericMatrix> TCOV, Nullable<NumericVector> delta, int nw, int nx, NumericMatrix X);
static SEXP _trajeR_ftauxCNORM_cpp_try(SEXP piSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP ngSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP, SEXP nxSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(ftauxCNORM_cpp(pi, beta, sigma, ng, nbeta, n, A, Y, ymin, ymax, TCOV, delta, nw, nx, X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_ftauxCNORM_cpp(SEXP piSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP ngSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP, SEXP nxSEXP, SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_ftauxCNORM_cpp_try(piSEXP, betaSEXP, sigmaSEXP, ngSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, yminSEXP, ymaxSEXP, TCOVSEXP, deltaSEXP, nwSEXP, nxSEXP, XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// EM_cpp
NumericVector EM_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, double ymin, double ymax, Nullable<NumericMatrix> TCOV, int nw, int itermax, bool EMIRLS, int refgr);
static SEXP _trajeR_EM_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< bool >::type EMIRLS(EMIRLSSEXP);
    Rcpp::traits::input_parameter< int >::type refgr(refgrSEXP);
    rcpp_result_gen = Rcpp::wrap(EM_cpp(param, ng, nx, nbeta, n, A, Y, X, ymin, ymax, TCOV, nw, itermax, EMIRLS, refgr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_EM_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_EM_cpp_try(paramSEXP, ngSEXP, nxSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, XSEXP, yminSEXP, ymaxSEXP, TCOVSEXP, nwSEXP, itermaxSEXP, EMIRLSSEXP, refgrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// EMSigmaunique_cpp
NumericVector EMSigmaunique_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, double ymin, double ymax, Nullable<NumericMatrix> TCOV, int nw, int itermax, bool EMIRLS, int refgr);
static SEXP _trajeR_EMSigmaunique_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< bool >::type EMIRLS(EMIRLSSEXP);
    Rcpp::traits::input_parameter< int >::type refgr(refgrSEXP);
    rcpp_result_gen = Rcpp::wrap(EMSigmaunique_cpp(param, ng, nx, nbeta, n, A, Y, X, ymin, ymax, TCOV, nw, itermax, EMIRLS, refgr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_EMSigmaunique_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_EMSigmaunique_cpp_try(paramSEXP, ngSEXP, nxSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, XSEXP, yminSEXP, ymaxSEXP, TCOVSEXP, nwSEXP, itermaxSEXP, EMIRLSSEXP, refgrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// EMCensored_cpp
NumericVector EMCensored_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, double ymin, double ymax, Nullable<NumericMatrix> TCOV, int nw, int itermax, bool EMIRLS, int refgr);
static SEXP _trajeR_EMCensored_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< bool >::type EMIRLS(EMIRLSSEXP);
    Rcpp::traits::input_parameter< int >::type refgr(refgrSEXP);
    rcpp_result_gen = Rcpp::wrap(EMCensored_cpp(param, ng, nx, nbeta, n, A, Y, X, ymin, ymax, TCOV, nw, itermax, EMIRLS, refgr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_EMCensored_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_EMCensored_cpp_try(paramSEXP, ngSEXP, nxSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, XSEXP, yminSEXP, ymaxSEXP, TCOVSEXP, nwSEXP, itermaxSEXP, EMIRLSSEXP, refgrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// EMCensoredSigmaunique_cpp
NumericVector EMCensoredSigmaunique_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, double ymin, double ymax, Nullable<NumericMatrix> TCOV, int nw, int itermax, bool EMIRLS, int refgr);
static SEXP _trajeR_EMCensoredSigmaunique_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< bool >::type EMIRLS(EMIRLSSEXP);
    Rcpp::traits::input_parameter< int >::type refgr(refgrSEXP);
    rcpp_result_gen = Rcpp::wrap(EMCensoredSigmaunique_cpp(param, ng, nx, nbeta, n, A, Y, X, ymin, ymax, TCOV, nw, itermax, EMIRLS, refgr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_EMCensoredSigmaunique_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_EMCensoredSigmaunique_cpp_try(paramSEXP, ngSEXP, nxSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, XSEXP, yminSEXP, ymaxSEXP, TCOVSEXP, nwSEXP, itermaxSEXP, EMIRLSSEXP, refgrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// IEM_cpp
arma::vec IEM_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, double ymin, double ymax, Nullable<NumericMatrix> TCOV, int nw, int refgr);
RcppExport SEXP _trajeR_IEM_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP refgrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type refgr(refgrSEXP);
    rcpp_result_gen = Rcpp::wrap(IEM_cpp(param, ng, nx, nbeta, n, A, Y, X, ymin, ymax, TCOV, nw, refgr));
    return rcpp_result_gen;
END_RCPP
}
// piikIntern_cpp
double piikIntern_cpp(NumericVector theta, int i, int k, int ng, NumericMatrix X);
static SEXP _trajeR_piikIntern_cpp_try(SEXP thetaSEXP, SEXP iSEXP, SEXP kSEXP, SEXP ngSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(piikIntern_cpp(theta, i, k, ng, X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_piikIntern_cpp(SEXP thetaSEXP, SEXP iSEXP, SEXP kSEXP, SEXP ngSEXP, SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_piikIntern_cpp_try(thetaSEXP, iSEXP, kSEXP, ngSEXP, XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// muikt_cpp
NumericVector muikt_cpp(NumericVector beta, int nbeta, int i, int period, NumericMatrix A, Nullable<NumericMatrix> TCOV, Nullable<List> delta, int nw, int k);
static SEXP _trajeR_muikt_cpp_try(SEXP betaSEXP, SEXP nbetaSEXP, SEXP iSEXP, SEXP periodSEXP, SEXP ASEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type period(periodSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(muikt_cpp(beta, nbeta, i, period, A, TCOV, delta, nw, k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_muikt_cpp(SEXP betaSEXP, SEXP nbetaSEXP, SEXP iSEXP, SEXP periodSEXP, SEXP ASEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP, SEXP kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_muikt_cpp_try(betaSEXP, nbetaSEXP, iSEXP, periodSEXP, ASEXP, TCOVSEXP, deltaSEXP, nwSEXP, kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ftheta_cpp
double ftheta_cpp(NumericVector theta, NumericMatrix taux, NumericMatrix X, int n, int ng, int period);
static SEXP _trajeR_ftheta_cpp_try(SEXP thetaSEXP, SEXP tauxSEXP, SEXP XSEXP, SEXP nSEXP, SEXP ngSEXP, SEXP periodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type taux(tauxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type period(periodSEXP);
    rcpp_result_gen = Rcpp::wrap(ftheta_cpp(theta, taux, X, n, ng, period));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_ftheta_cpp(SEXP thetaSEXP, SEXP tauxSEXP, SEXP XSEXP, SEXP nSEXP, SEXP ngSEXP, SEXP periodSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_ftheta_cpp_try(thetaSEXP, tauxSEXP, XSEXP, nSEXP, ngSEXP, periodSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// difftheta_cpp
NumericVector difftheta_cpp(NumericVector theta, NumericMatrix taux, NumericMatrix X, int n, int ng, int period);
static SEXP _trajeR_difftheta_cpp_try(SEXP thetaSEXP, SEXP tauxSEXP, SEXP XSEXP, SEXP nSEXP, SEXP ngSEXP, SEXP periodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type taux(tauxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type period(periodSEXP);
    rcpp_result_gen = Rcpp::wrap(difftheta_cpp(theta, taux, X, n, ng, period));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_difftheta_cpp(SEXP thetaSEXP, SEXP tauxSEXP, SEXP XSEXP, SEXP nSEXP, SEXP ngSEXP, SEXP periodSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_difftheta_cpp_try(thetaSEXP, tauxSEXP, XSEXP, nSEXP, ngSEXP, periodSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// thethaIRLS_cpp
Rcpp::NumericVector thethaIRLS_cpp(Rcpp::NumericVector thetaIRLS, int n, int ng, Rcpp::NumericMatrix X, arma::mat taux, int refgr);
static SEXP _trajeR_thethaIRLS_cpp_try(SEXP thetaIRLSSEXP, SEXP nSEXP, SEXP ngSEXP, SEXP XSEXP, SEXP tauxSEXP, SEXP refgrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type thetaIRLS(thetaIRLSSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type taux(tauxSEXP);
    Rcpp::traits::input_parameter< int >::type refgr(refgrSEXP);
    rcpp_result_gen = Rcpp::wrap(thethaIRLS_cpp(thetaIRLS, n, ng, X, taux, refgr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_thethaIRLS_cpp(SEXP thetaIRLSSEXP, SEXP nSEXP, SEXP ngSEXP, SEXP XSEXP, SEXP tauxSEXP, SEXP refgrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_thethaIRLS_cpp_try(thetaIRLSSEXP, nSEXP, ngSEXP, XSEXP, tauxSEXP, refgrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// findtheta_cpp
NumericVector findtheta_cpp(NumericVector theta, NumericMatrix taux, NumericMatrix X, int n, int ng, int nx, int period, bool EMIRLS, int refgr);
static SEXP _trajeR_findtheta_cpp_try(SEXP thetaSEXP, SEXP tauxSEXP, SEXP XSEXP, SEXP nSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP periodSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type taux(tauxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< int >::type period(periodSEXP);
    Rcpp::traits::input_parameter< bool >::type EMIRLS(EMIRLSSEXP);
    Rcpp::traits::input_parameter< int >::type refgr(refgrSEXP);
    rcpp_result_gen = Rcpp::wrap(findtheta_cpp(theta, taux, X, n, ng, nx, period, EMIRLS, refgr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_findtheta_cpp(SEXP thetaSEXP, SEXP tauxSEXP, SEXP XSEXP, SEXP nSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP periodSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_findtheta_cpp_try(thetaSEXP, tauxSEXP, XSEXP, nSEXP, ngSEXP, nxSEXP, periodSEXP, EMIRLSSEXP, refgrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// IEMLOGIT_cpp
arma::vec IEMLOGIT_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOV, int nw, int refgr);
RcppExport SEXP _trajeR_IEMLOGIT_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP refgrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type refgr(refgrSEXP);
    rcpp_result_gen = Rcpp::wrap(IEMLOGIT_cpp(param, ng, nx, nbeta, n, A, Y, X, TCOV, nw, refgr));
    return rcpp_result_gen;
END_RCPP
}
// gkLOGIT_cpp
double gkLOGIT_cpp(List beta, int i, int k, IntegerVector nbeta, NumericMatrix A, NumericMatrix Y, Nullable<NumericMatrix> TCOV, Nullable<List> delta, int nw);
static SEXP _trajeR_gkLOGIT_cpp_try(SEXP betaSEXP, SEXP iSEXP, SEXP kSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(gkLOGIT_cpp(beta, i, k, nbeta, A, Y, TCOV, delta, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_gkLOGIT_cpp(SEXP betaSEXP, SEXP iSEXP, SEXP kSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_gkLOGIT_cpp_try(betaSEXP, iSEXP, kSEXP, nbetaSEXP, ASEXP, YSEXP, TCOVSEXP, deltaSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// difLLOGIT_cpp
NumericVector difLLOGIT_cpp(NumericVector param, int ng, int nx, int n, IntegerVector nbeta, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOV, int nw);
static SEXP _trajeR_difLLOGIT_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(difLLOGIT_cpp(param, ng, nx, n, nbeta, A, Y, X, TCOV, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_difLLOGIT_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_difLLOGIT_cpp_try(paramSEXP, ngSEXP, nxSEXP, nSEXP, nbetaSEXP, ASEXP, YSEXP, XSEXP, TCOVSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// likelihoodLOGIT_cpp
double likelihoodLOGIT_cpp(NumericVector param, int ng, int nx, int n, IntegerVector nbeta, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOV, int nw);
static SEXP _trajeR_likelihoodLOGIT_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodLOGIT_cpp(param, ng, nx, n, nbeta, A, Y, X, TCOV, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_likelihoodLOGIT_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_likelihoodLOGIT_cpp_try(paramSEXP, ngSEXP, nxSEXP, nSEXP, nbetaSEXP, ASEXP, YSEXP, XSEXP, TCOVSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ftauxLOGIT_cpp
NumericMatrix ftauxLOGIT_cpp(NumericVector pi, NumericVector beta, int ng, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, Nullable<NumericMatrix> TCOV, Nullable<NumericVector> delta, int nw, int nx, NumericMatrix X);
static SEXP _trajeR_ftauxLOGIT_cpp_try(SEXP piSEXP, SEXP betaSEXP, SEXP ngSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP, SEXP nxSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(ftauxLOGIT_cpp(pi, beta, ng, nbeta, n, A, Y, TCOV, delta, nw, nx, X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_ftauxLOGIT_cpp(SEXP piSEXP, SEXP betaSEXP, SEXP ngSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP, SEXP nxSEXP, SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_ftauxLOGIT_cpp_try(piSEXP, betaSEXP, ngSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, TCOVSEXP, deltaSEXP, nwSEXP, nxSEXP, XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// likelihoodEMLOGIT_cpp
double likelihoodEMLOGIT_cpp(int n, int ng, IntegerVector nbeta, NumericVector beta, NumericVector pi, NumericMatrix A, NumericMatrix Y, Nullable<NumericMatrix> TCOV, Nullable<NumericVector> delta, int nw);
static SEXP _trajeR_likelihoodEMLOGIT_cpp_try(SEXP nSEXP, SEXP ngSEXP, SEXP nbetaSEXP, SEXP betaSEXP, SEXP piSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodEMLOGIT_cpp(n, ng, nbeta, beta, pi, A, Y, TCOV, delta, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_likelihoodEMLOGIT_cpp(SEXP nSEXP, SEXP ngSEXP, SEXP nbetaSEXP, SEXP betaSEXP, SEXP piSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_likelihoodEMLOGIT_cpp_try(nSEXP, ngSEXP, nbetaSEXP, betaSEXP, piSEXP, ASEXP, YSEXP, TCOVSEXP, deltaSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// EMLOGIT_cpp
NumericVector EMLOGIT_cpp(NumericVector param, int ng, int nx, int n, IntegerVector nbeta, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOV, int nw, int itermax, bool EMIRLS, int refgr);
static SEXP _trajeR_EMLOGIT_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< bool >::type EMIRLS(EMIRLSSEXP);
    Rcpp::traits::input_parameter< int >::type refgr(refgrSEXP);
    rcpp_result_gen = Rcpp::wrap(EMLOGIT_cpp(param, ng, nx, n, nbeta, A, Y, X, TCOV, nw, itermax, EMIRLS, refgr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_EMLOGIT_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_EMLOGIT_cpp_try(paramSEXP, ngSEXP, nxSEXP, nSEXP, nbetaSEXP, ASEXP, YSEXP, XSEXP, TCOVSEXP, nwSEXP, itermaxSEXP, EMIRLSSEXP, refgrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// EMLOGITIRLS_cpp
NumericVector EMLOGITIRLS_cpp(NumericVector param, int ng, int nx, int n, IntegerVector nbeta, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOVinit, int nw, int itermax, bool EMIRLS, int refgr);
static SEXP _trajeR_EMLOGITIRLS_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVinitSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOVinit(TCOVinitSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< bool >::type EMIRLS(EMIRLSSEXP);
    Rcpp::traits::input_parameter< int >::type refgr(refgrSEXP);
    rcpp_result_gen = Rcpp::wrap(EMLOGITIRLS_cpp(param, ng, nx, n, nbeta, A, Y, X, TCOVinit, nw, itermax, EMIRLS, refgr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_EMLOGITIRLS_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVinitSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_EMLOGITIRLS_cpp_try(paramSEXP, ngSEXP, nxSEXP, nSEXP, nbetaSEXP, ASEXP, YSEXP, XSEXP, TCOVinitSEXP, nwSEXP, itermaxSEXP, EMIRLSSEXP, refgrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// gkPois_cpp
double gkPois_cpp(List beta, int i, int k, IntegerVector nbeta, NumericMatrix A, NumericMatrix Y, Nullable<NumericMatrix> TCOV, Nullable<List> delta, int nw);
static SEXP _trajeR_gkPois_cpp_try(SEXP betaSEXP, SEXP iSEXP, SEXP kSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(gkPois_cpp(beta, i, k, nbeta, A, Y, TCOV, delta, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_gkPois_cpp(SEXP betaSEXP, SEXP iSEXP, SEXP kSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_gkPois_cpp_try(betaSEXP, iSEXP, kSEXP, nbetaSEXP, ASEXP, YSEXP, TCOVSEXP, deltaSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// difLbetakPois_cpp
NumericVector difLbetakPois_cpp(NumericVector theta, List beta, Nullable<List> delta, int k, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOV, int nw);
static SEXP _trajeR_difLbetakPois_cpp_try(SEXP thetaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP kSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(difLbetakPois_cpp(theta, beta, delta, k, ng, nx, nbeta, n, A, Y, X, TCOV, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_difLbetakPois_cpp(SEXP thetaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP kSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_difLbetakPois_cpp_try(thetaSEXP, betaSEXP, deltaSEXP, kSEXP, ngSEXP, nxSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, XSEXP, TCOVSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// difLPois_cpp
NumericVector difLPois_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOV, int nw);
static SEXP _trajeR_difLPois_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(difLPois_cpp(param, ng, nx, nbeta, n, A, Y, X, TCOV, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_difLPois_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_difLPois_cpp_try(paramSEXP, ngSEXP, nxSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, XSEXP, TCOVSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// likelihoodPois_cpp
double likelihoodPois_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOV, int nw);
static SEXP _trajeR_likelihoodPois_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodPois_cpp(param, ng, nx, nbeta, n, A, Y, X, TCOV, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_likelihoodPois_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_likelihoodPois_cpp_try(paramSEXP, ngSEXP, nxSEXP, nbetaSEXP, nSEXP, ASEXP, YSEXP, XSEXP, TCOVSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// gkZIP_cpp
double gkZIP_cpp(List beta, List nu, int i, int k, IntegerVector nbeta, IntegerVector nnu, NumericMatrix A, NumericMatrix Y, Nullable<NumericMatrix> TCOV, Nullable<List> delta, int nw);
static SEXP _trajeR_gkZIP_cpp_try(SEXP betaSEXP, SEXP nuSEXP, SEXP iSEXP, SEXP kSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< List >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nnu(nnuSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(gkZIP_cpp(beta, nu, i, k, nbeta, nnu, A, Y, TCOV, delta, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_gkZIP_cpp(SEXP betaSEXP, SEXP nuSEXP, SEXP iSEXP, SEXP kSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_gkZIP_cpp_try(betaSEXP, nuSEXP, iSEXP, kSEXP, nbetaSEXP, nnuSEXP, ASEXP, YSEXP, TCOVSEXP, deltaSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// difLZIP_cpp
NumericVector difLZIP_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, IntegerVector nnu, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOV, int nw);
static SEXP _trajeR_difLZIP_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nnu(nnuSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(difLZIP_cpp(param, ng, nx, nbeta, nnu, n, A, Y, X, TCOV, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_difLZIP_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_difLZIP_cpp_try(paramSEXP, ngSEXP, nxSEXP, nbetaSEXP, nnuSEXP, nSEXP, ASEXP, YSEXP, XSEXP, TCOVSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// likelihoodZIP_cpp
double likelihoodZIP_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, IntegerVector nnu, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOV, int nw);
static SEXP _trajeR_likelihoodZIP_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nnu(nnuSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodZIP_cpp(param, ng, nx, nbeta, nnu, n, A, Y, X, TCOV, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_likelihoodZIP_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_likelihoodZIP_cpp_try(paramSEXP, ngSEXP, nxSEXP, nbetaSEXP, nnuSEXP, nSEXP, ASEXP, YSEXP, XSEXP, TCOVSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// likelihoodEMZIP_cpp
double likelihoodEMZIP_cpp(int n, int ng, IntegerVector nbeta, IntegerVector nnu, NumericVector beta, NumericVector nu, NumericVector pi, NumericMatrix A, NumericMatrix Y, Nullable<NumericMatrix> TCOV, Nullable<NumericVector> delta, int nw);
static SEXP _trajeR_likelihoodEMZIP_cpp_try(SEXP nSEXP, SEXP ngSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP piSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nnu(nnuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodEMZIP_cpp(n, ng, nbeta, nnu, beta, nu, pi, A, Y, TCOV, delta, nw));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_likelihoodEMZIP_cpp(SEXP nSEXP, SEXP ngSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP piSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_likelihoodEMZIP_cpp_try(nSEXP, ngSEXP, nbetaSEXP, nnuSEXP, betaSEXP, nuSEXP, piSEXP, ASEXP, YSEXP, TCOVSEXP, deltaSEXP, nwSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ftauxZIP_cpp
NumericMatrix ftauxZIP_cpp(NumericVector pi, NumericVector beta, NumericVector nu, int ng, IntegerVector nbeta, IntegerVector nnu, int n, NumericMatrix A, NumericMatrix Y, Nullable<NumericMatrix> TCOV, Nullable<NumericVector> delta, int nw, int nx, NumericMatrix X);
static SEXP _trajeR_ftauxZIP_cpp_try(SEXP piSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP ngSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP, SEXP nxSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nnu(nnuSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(ftauxZIP_cpp(pi, beta, nu, ng, nbeta, nnu, n, A, Y, TCOV, delta, nw, nx, X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_ftauxZIP_cpp(SEXP piSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP ngSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP, SEXP nxSEXP, SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_ftauxZIP_cpp_try(piSEXP, betaSEXP, nuSEXP, ngSEXP, nbetaSEXP, nnuSEXP, nSEXP, ASEXP, YSEXP, TCOVSEXP, deltaSEXP, nwSEXP, nxSEXP, XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// EMZIP_cpp
NumericVector EMZIP_cpp(NumericVector param, int ng, int nx, int n, IntegerVector nbeta, IntegerVector nnu, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOV, int nw, int itermax, bool EMIRLS, int refgr);
static SEXP _trajeR_EMZIP_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nnu(nnuSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< bool >::type EMIRLS(EMIRLSSEXP);
    Rcpp::traits::input_parameter< int >::type refgr(refgrSEXP);
    rcpp_result_gen = Rcpp::wrap(EMZIP_cpp(param, ng, nx, n, nbeta, nnu, A, Y, X, TCOV, nw, itermax, EMIRLS, refgr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_EMZIP_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_EMZIP_cpp_try(paramSEXP, ngSEXP, nxSEXP, nSEXP, nbetaSEXP, nnuSEXP, ASEXP, YSEXP, XSEXP, TCOVSEXP, nwSEXP, itermaxSEXP, EMIRLSSEXP, refgrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// EMZIPIRLS_cpp
NumericVector EMZIPIRLS_cpp(NumericVector param, int ng, int nx, int n, IntegerVector nbeta, IntegerVector nnu, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOVinit, int nw, int itermax, bool EMIRLS, int refgr);
static SEXP _trajeR_EMZIPIRLS_cpp_try(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVinitSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nnu(nnuSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOVinit(TCOVinitSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< bool >::type EMIRLS(EMIRLSSEXP);
    Rcpp::traits::input_parameter< int >::type refgr(refgrSEXP);
    rcpp_result_gen = Rcpp::wrap(EMZIPIRLS_cpp(param, ng, nx, n, nbeta, nnu, A, Y, X, TCOVinit, nw, itermax, EMIRLS, refgr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_EMZIPIRLS_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVinitSEXP, SEXP nwSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP, SEXP refgrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_EMZIPIRLS_cpp_try(paramSEXP, ngSEXP, nxSEXP, nSEXP, nbetaSEXP, nnuSEXP, ASEXP, YSEXP, XSEXP, TCOVinitSEXP, nwSEXP, itermaxSEXP, EMIRLSSEXP, refgrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// IEMZIP_cpp
arma::vec IEMZIP_cpp(NumericVector param, int ng, int nx, IntegerVector nbeta, IntegerVector nnu, int n, NumericMatrix A, NumericMatrix Y, NumericMatrix X, Nullable<NumericMatrix> TCOV, int nw, int refgr);
RcppExport SEXP _trajeR_IEMZIP_cpp(SEXP paramSEXP, SEXP ngSEXP, SEXP nxSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP nSEXP, SEXP ASEXP, SEXP YSEXP, SEXP XSEXP, SEXP TCOVSEXP, SEXP nwSEXP, SEXP refgrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nnu(nnuSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type refgr(refgrSEXP);
    rcpp_result_gen = Rcpp::wrap(IEMZIP_cpp(param, ng, nx, nbeta, nnu, n, A, Y, X, TCOV, nw, refgr));
    return rcpp_result_gen;
END_RCPP
}
// convtolist_cpp
List convtolist_cpp(arma::vec v, arma::vec nelt);
static SEXP _trajeR_convtolist_cpp_try(SEXP vSEXP, SEXP neltSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nelt(neltSEXP);
    rcpp_result_gen = Rcpp::wrap(convtolist_cpp(v, nelt));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_convtolist_cpp(SEXP vSEXP, SEXP neltSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_convtolist_cpp_try(vSEXP, neltSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mPsi_cpp
arma::mat mPsi_cpp(arma::vec psi, List lng);
static SEXP _trajeR_mPsi_cpp_try(SEXP psiSEXP, SEXP lngSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< List >::type lng(lngSEXP);
    rcpp_result_gen = Rcpp::wrap(mPsi_cpp(psi, lng));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_mPsi_cpp(SEXP psiSEXP, SEXP lngSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_mPsi_cpp_try(psiSEXP, lngSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// piikMult_cpp
double piikMult_cpp(List ltheta, arma::mat mPsi, int i, arma::vec vk, List lng, List lX, arma::mat mk);
static SEXP _trajeR_piikMult_cpp_try(SEXP lthetaSEXP, SEXP mPsiSEXP, SEXP iSEXP, SEXP vkSEXP, SEXP lngSEXP, SEXP lXSEXP, SEXP mkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type ltheta(lthetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mPsi(mPsiSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vk(vkSEXP);
    Rcpp::traits::input_parameter< List >::type lng(lngSEXP);
    Rcpp::traits::input_parameter< List >::type lX(lXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mk(mkSEXP);
    rcpp_result_gen = Rcpp::wrap(piikMult_cpp(ltheta, mPsi, i, vk, lng, lX, mk));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_piikMult_cpp(SEXP lthetaSEXP, SEXP mPsiSEXP, SEXP iSEXP, SEXP vkSEXP, SEXP lngSEXP, SEXP lXSEXP, SEXP mkSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_piikMult_cpp_try(lthetaSEXP, mPsiSEXP, iSEXP, vkSEXP, lngSEXP, lXSEXP, mkSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// densityChoice_cpp
double densityChoice_cpp(List beta, Nullable<NumericVector> alphainit, int i, int k, IntegerVector nbeta, NumericMatrix A, NumericMatrix Y, double ymin, double ymax, Nullable<NumericMatrix> TCOV, Nullable<List> delta, int nw, Nullable<List> nuinit, Nullable<IntegerVector> nnuinit, std::string model);
static SEXP _trajeR_densityChoice_cpp_try(SEXP betaSEXP, SEXP alphainitSEXP, SEXP iSEXP, SEXP kSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP, SEXP nuinitSEXP, SEXP nnuinitSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type alphainit(alphainitSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type TCOV(TCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type nuinit(nuinitSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type nnuinit(nnuinitSEXP);
    Rcpp::traits::input_parameter< std::string >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(densityChoice_cpp(beta, alphainit, i, k, nbeta, A, Y, ymin, ymax, TCOV, delta, nw, nuinit, nnuinit, model));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_densityChoice_cpp(SEXP betaSEXP, SEXP alphainitSEXP, SEXP iSEXP, SEXP kSEXP, SEXP nbetaSEXP, SEXP ASEXP, SEXP YSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP TCOVSEXP, SEXP deltaSEXP, SEXP nwSEXP, SEXP nuinitSEXP, SEXP nnuinitSEXP, SEXP modelSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_densityChoice_cpp_try(betaSEXP, alphainitSEXP, iSEXP, kSEXP, nbetaSEXP, ASEXP, YSEXP, yminSEXP, ymaxSEXP, TCOVSEXP, deltaSEXP, nwSEXP, nuinitSEXP, nnuinitSEXP, modelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// likelihoodMult_cpp
double likelihoodMult_cpp(arma::vec vparam, List lng, List lnx, List lnbeta, List ln, List lA, List lY, List lX, List lymin, List lymax, Nullable<List> lTCOVinit, List lnw, arma::vec vp, arma::mat mk, List lnnu, std::vector<std::string> model);
static SEXP _trajeR_likelihoodMult_cpp_try(SEXP vparamSEXP, SEXP lngSEXP, SEXP lnxSEXP, SEXP lnbetaSEXP, SEXP lnSEXP, SEXP lASEXP, SEXP lYSEXP, SEXP lXSEXP, SEXP lyminSEXP, SEXP lymaxSEXP, SEXP lTCOVinitSEXP, SEXP lnwSEXP, SEXP vpSEXP, SEXP mkSEXP, SEXP lnnuSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type vparam(vparamSEXP);
    Rcpp::traits::input_parameter< List >::type lng(lngSEXP);
    Rcpp::traits::input_parameter< List >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< List >::type lnbeta(lnbetaSEXP);
    Rcpp::traits::input_parameter< List >::type ln(lnSEXP);
    Rcpp::traits::input_parameter< List >::type lA(lASEXP);
    Rcpp::traits::input_parameter< List >::type lY(lYSEXP);
    Rcpp::traits::input_parameter< List >::type lX(lXSEXP);
    Rcpp::traits::input_parameter< List >::type lymin(lyminSEXP);
    Rcpp::traits::input_parameter< List >::type lymax(lymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type lTCOVinit(lTCOVinitSEXP);
    Rcpp::traits::input_parameter< List >::type lnw(lnwSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vp(vpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mk(mkSEXP);
    Rcpp::traits::input_parameter< List >::type lnnu(lnnuSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodMult_cpp(vparam, lng, lnx, lnbeta, ln, lA, lY, lX, lymin, lymax, lTCOVinit, lnw, vp, mk, lnnu, model));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_likelihoodMult_cpp(SEXP vparamSEXP, SEXP lngSEXP, SEXP lnxSEXP, SEXP lnbetaSEXP, SEXP lnSEXP, SEXP lASEXP, SEXP lYSEXP, SEXP lXSEXP, SEXP lyminSEXP, SEXP lymaxSEXP, SEXP lTCOVinitSEXP, SEXP lnwSEXP, SEXP vpSEXP, SEXP mkSEXP, SEXP lnnuSEXP, SEXP modelSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_likelihoodMult_cpp_try(vparamSEXP, lngSEXP, lnxSEXP, lnbetaSEXP, lnSEXP, lASEXP, lYSEXP, lXSEXP, lyminSEXP, lymaxSEXP, lTCOVinitSEXP, lnwSEXP, vpSEXP, mkSEXP, lnnuSEXP, modelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// difLalphaMult_cpp
arma::rowvec difLalphaMult_cpp(arma::vec vparam, List lng, List lnx, List lnbeta, List ln, List lA, List lY, List lX, List lymin, List lymax, Nullable<List> lTCOVinit, List lnw, arma::vec vp, arma::mat mk, List lnnu, std::vector<std::string> model);
static SEXP _trajeR_difLalphaMult_cpp_try(SEXP vparamSEXP, SEXP lngSEXP, SEXP lnxSEXP, SEXP lnbetaSEXP, SEXP lnSEXP, SEXP lASEXP, SEXP lYSEXP, SEXP lXSEXP, SEXP lyminSEXP, SEXP lymaxSEXP, SEXP lTCOVinitSEXP, SEXP lnwSEXP, SEXP vpSEXP, SEXP mkSEXP, SEXP lnnuSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type vparam(vparamSEXP);
    Rcpp::traits::input_parameter< List >::type lng(lngSEXP);
    Rcpp::traits::input_parameter< List >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< List >::type lnbeta(lnbetaSEXP);
    Rcpp::traits::input_parameter< List >::type ln(lnSEXP);
    Rcpp::traits::input_parameter< List >::type lA(lASEXP);
    Rcpp::traits::input_parameter< List >::type lY(lYSEXP);
    Rcpp::traits::input_parameter< List >::type lX(lXSEXP);
    Rcpp::traits::input_parameter< List >::type lymin(lyminSEXP);
    Rcpp::traits::input_parameter< List >::type lymax(lymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type lTCOVinit(lTCOVinitSEXP);
    Rcpp::traits::input_parameter< List >::type lnw(lnwSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vp(vpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mk(mkSEXP);
    Rcpp::traits::input_parameter< List >::type lnnu(lnnuSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(difLalphaMult_cpp(vparam, lng, lnx, lnbeta, ln, lA, lY, lX, lymin, lymax, lTCOVinit, lnw, vp, mk, lnnu, model));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_difLalphaMult_cpp(SEXP vparamSEXP, SEXP lngSEXP, SEXP lnxSEXP, SEXP lnbetaSEXP, SEXP lnSEXP, SEXP lASEXP, SEXP lYSEXP, SEXP lXSEXP, SEXP lyminSEXP, SEXP lymaxSEXP, SEXP lTCOVinitSEXP, SEXP lnwSEXP, SEXP vpSEXP, SEXP mkSEXP, SEXP lnnuSEXP, SEXP modelSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_difLalphaMult_cpp_try(vparamSEXP, lngSEXP, lnxSEXP, lnbetaSEXP, lnSEXP, lASEXP, lYSEXP, lXSEXP, lyminSEXP, lymaxSEXP, lTCOVinitSEXP, lnwSEXP, vpSEXP, mkSEXP, lnnuSEXP, modelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ftauxPiikMult_cpp
List ftauxPiikMult_cpp(List lthetainit, arma::mat mPsi, List lbeta, Nullable<List> lsigmainit, List lng, List lnbeta, List ln, List lA, List lY, List lymin, List lymax, Nullable<List> lTCOVinit, List ldelta, List lnw, List lnx, List lX, arma::mat mk, arma::vec vp, Nullable<List> nuinit, Nullable<List> nnuinit, std::vector<std::string> model);
static SEXP _trajeR_ftauxPiikMult_cpp_try(SEXP lthetainitSEXP, SEXP mPsiSEXP, SEXP lbetaSEXP, SEXP lsigmainitSEXP, SEXP lngSEXP, SEXP lnbetaSEXP, SEXP lnSEXP, SEXP lASEXP, SEXP lYSEXP, SEXP lyminSEXP, SEXP lymaxSEXP, SEXP lTCOVinitSEXP, SEXP ldeltaSEXP, SEXP lnwSEXP, SEXP lnxSEXP, SEXP lXSEXP, SEXP mkSEXP, SEXP vpSEXP, SEXP nuinitSEXP, SEXP nnuinitSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type lthetainit(lthetainitSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mPsi(mPsiSEXP);
    Rcpp::traits::input_parameter< List >::type lbeta(lbetaSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type lsigmainit(lsigmainitSEXP);
    Rcpp::traits::input_parameter< List >::type lng(lngSEXP);
    Rcpp::traits::input_parameter< List >::type lnbeta(lnbetaSEXP);
    Rcpp::traits::input_parameter< List >::type ln(lnSEXP);
    Rcpp::traits::input_parameter< List >::type lA(lASEXP);
    Rcpp::traits::input_parameter< List >::type lY(lYSEXP);
    Rcpp::traits::input_parameter< List >::type lymin(lyminSEXP);
    Rcpp::traits::input_parameter< List >::type lymax(lymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type lTCOVinit(lTCOVinitSEXP);
    Rcpp::traits::input_parameter< List >::type ldelta(ldeltaSEXP);
    Rcpp::traits::input_parameter< List >::type lnw(lnwSEXP);
    Rcpp::traits::input_parameter< List >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< List >::type lX(lXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mk(mkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vp(vpSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type nuinit(nuinitSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type nnuinit(nnuinitSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(ftauxPiikMult_cpp(lthetainit, mPsi, lbeta, lsigmainit, lng, lnbeta, ln, lA, lY, lymin, lymax, lTCOVinit, ldelta, lnw, lnx, lX, mk, vp, nuinit, nnuinit, model));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_ftauxPiikMult_cpp(SEXP lthetainitSEXP, SEXP mPsiSEXP, SEXP lbetaSEXP, SEXP lsigmainitSEXP, SEXP lngSEXP, SEXP lnbetaSEXP, SEXP lnSEXP, SEXP lASEXP, SEXP lYSEXP, SEXP lyminSEXP, SEXP lymaxSEXP, SEXP lTCOVinitSEXP, SEXP ldeltaSEXP, SEXP lnwSEXP, SEXP lnxSEXP, SEXP lXSEXP, SEXP mkSEXP, SEXP vpSEXP, SEXP nuinitSEXP, SEXP nnuinitSEXP, SEXP modelSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_ftauxPiikMult_cpp_try(lthetainitSEXP, mPsiSEXP, lbetaSEXP, lsigmainitSEXP, lngSEXP, lnbetaSEXP, lnSEXP, lASEXP, lYSEXP, lyminSEXP, lymaxSEXP, lTCOVinitSEXP, ldeltaSEXP, lnwSEXP, lnxSEXP, lXSEXP, mkSEXP, vpSEXP, nuinitSEXP, nnuinitSEXP, modelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// likelihoodMultEM_cpp
double likelihoodMultEM_cpp(List lthetainit, arma::mat mPsi, List lbeta, Nullable<List> lsigmainit, List lng, List lnx, List lnbeta, List ln, List lA, List lY, List lX, List lymin, List lymax, Nullable<List> lTCOVinit, List ldelta, List lnw, arma::mat mk, arma::mat mprob, arma::vec vp, Nullable<List> nuinit, Nullable<List> nnuinit, std::vector<std::string> model);
static SEXP _trajeR_likelihoodMultEM_cpp_try(SEXP lthetainitSEXP, SEXP mPsiSEXP, SEXP lbetaSEXP, SEXP lsigmainitSEXP, SEXP lngSEXP, SEXP lnxSEXP, SEXP lnbetaSEXP, SEXP lnSEXP, SEXP lASEXP, SEXP lYSEXP, SEXP lXSEXP, SEXP lyminSEXP, SEXP lymaxSEXP, SEXP lTCOVinitSEXP, SEXP ldeltaSEXP, SEXP lnwSEXP, SEXP mkSEXP, SEXP mprobSEXP, SEXP vpSEXP, SEXP nuinitSEXP, SEXP nnuinitSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type lthetainit(lthetainitSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mPsi(mPsiSEXP);
    Rcpp::traits::input_parameter< List >::type lbeta(lbetaSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type lsigmainit(lsigmainitSEXP);
    Rcpp::traits::input_parameter< List >::type lng(lngSEXP);
    Rcpp::traits::input_parameter< List >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< List >::type lnbeta(lnbetaSEXP);
    Rcpp::traits::input_parameter< List >::type ln(lnSEXP);
    Rcpp::traits::input_parameter< List >::type lA(lASEXP);
    Rcpp::traits::input_parameter< List >::type lY(lYSEXP);
    Rcpp::traits::input_parameter< List >::type lX(lXSEXP);
    Rcpp::traits::input_parameter< List >::type lymin(lyminSEXP);
    Rcpp::traits::input_parameter< List >::type lymax(lymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type lTCOVinit(lTCOVinitSEXP);
    Rcpp::traits::input_parameter< List >::type ldelta(ldeltaSEXP);
    Rcpp::traits::input_parameter< List >::type lnw(lnwSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mk(mkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mprob(mprobSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vp(vpSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type nuinit(nuinitSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type nnuinit(nnuinitSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodMultEM_cpp(lthetainit, mPsi, lbeta, lsigmainit, lng, lnx, lnbeta, ln, lA, lY, lX, lymin, lymax, lTCOVinit, ldelta, lnw, mk, mprob, vp, nuinit, nnuinit, model));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_likelihoodMultEM_cpp(SEXP lthetainitSEXP, SEXP mPsiSEXP, SEXP lbetaSEXP, SEXP lsigmainitSEXP, SEXP lngSEXP, SEXP lnxSEXP, SEXP lnbetaSEXP, SEXP lnSEXP, SEXP lASEXP, SEXP lYSEXP, SEXP lXSEXP, SEXP lyminSEXP, SEXP lymaxSEXP, SEXP lTCOVinitSEXP, SEXP ldeltaSEXP, SEXP lnwSEXP, SEXP mkSEXP, SEXP mprobSEXP, SEXP vpSEXP, SEXP nuinitSEXP, SEXP nnuinitSEXP, SEXP modelSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_likelihoodMultEM_cpp_try(lthetainitSEXP, mPsiSEXP, lbetaSEXP, lsigmainitSEXP, lngSEXP, lnxSEXP, lnbetaSEXP, lnSEXP, lASEXP, lYSEXP, lXSEXP, lyminSEXP, lymaxSEXP, lTCOVinitSEXP, ldeltaSEXP, lnwSEXP, mkSEXP, mprobSEXP, vpSEXP, nuinitSEXP, nnuinitSEXP, modelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// EMCNORMparam
List EMCNORMparam(arma::vec beta, int nw, int ng, int n, int period, int j, arma::vec nbeta, arma::mat Y, List lA, arma::mat taux, arma::vec nbetacum, Nullable<List> lTCOV, Nullable<List> ldelta);
static SEXP _trajeR_EMCNORMparam_try(SEXP betaSEXP, SEXP nwSEXP, SEXP ngSEXP, SEXP nSEXP, SEXP periodSEXP, SEXP jSEXP, SEXP nbetaSEXP, SEXP YSEXP, SEXP lASEXP, SEXP tauxSEXP, SEXP nbetacumSEXP, SEXP lTCOVSEXP, SEXP ldeltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type period(periodSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type lA(lASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type taux(tauxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nbetacum(nbetacumSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type lTCOV(lTCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type ldelta(ldeltaSEXP);
    rcpp_result_gen = Rcpp::wrap(EMCNORMparam(beta, nw, ng, n, period, j, nbeta, Y, lA, taux, nbetacum, lTCOV, ldelta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_EMCNORMparam(SEXP betaSEXP, SEXP nwSEXP, SEXP ngSEXP, SEXP nSEXP, SEXP periodSEXP, SEXP jSEXP, SEXP nbetaSEXP, SEXP YSEXP, SEXP lASEXP, SEXP tauxSEXP, SEXP nbetacumSEXP, SEXP lTCOVSEXP, SEXP ldeltaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_EMCNORMparam_try(betaSEXP, nwSEXP, ngSEXP, nSEXP, periodSEXP, jSEXP, nbetaSEXP, YSEXP, lASEXP, tauxSEXP, nbetacumSEXP, lTCOVSEXP, ldeltaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// EMLOGITparam
List EMLOGITparam(arma::vec beta, int nw, int ng, int n, int period, int j, arma::vec nbeta, arma::mat Y, List lA, arma::mat taux, arma::vec nbetacum, Nullable<List> lTCOV, Nullable<List> ldelta);
static SEXP _trajeR_EMLOGITparam_try(SEXP betaSEXP, SEXP nwSEXP, SEXP ngSEXP, SEXP nSEXP, SEXP periodSEXP, SEXP jSEXP, SEXP nbetaSEXP, SEXP YSEXP, SEXP lASEXP, SEXP tauxSEXP, SEXP nbetacumSEXP, SEXP lTCOVSEXP, SEXP ldeltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type period(periodSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type lA(lASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type taux(tauxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nbetacum(nbetacumSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type lTCOV(lTCOVSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type ldelta(ldeltaSEXP);
    rcpp_result_gen = Rcpp::wrap(EMLOGITparam(beta, nw, ng, n, period, j, nbeta, Y, lA, taux, nbetacum, lTCOV, ldelta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_EMLOGITparam(SEXP betaSEXP, SEXP nwSEXP, SEXP ngSEXP, SEXP nSEXP, SEXP periodSEXP, SEXP jSEXP, SEXP nbetaSEXP, SEXP YSEXP, SEXP lASEXP, SEXP tauxSEXP, SEXP nbetacumSEXP, SEXP lTCOVSEXP, SEXP ldeltaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_EMLOGITparam_try(betaSEXP, nwSEXP, ngSEXP, nSEXP, periodSEXP, jSEXP, nbetaSEXP, YSEXP, lASEXP, tauxSEXP, nbetacumSEXP, lTCOVSEXP, ldeltaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// EMZIPparam
List EMZIPparam(arma::vec beta, arma::vec nu, int nw, int ng, int n, int period, int j, arma::vec nbeta, arma::vec nnu, arma::mat Y, List lA, arma::mat taux, arma::vec nbetacum, arma::vec nnucum, Nullable<IntegerVector> ndeltacum, Nullable<List> lTCOVinit, Nullable<List> ldeltainit);
static SEXP _trajeR_EMZIPparam_try(SEXP betaSEXP, SEXP nuSEXP, SEXP nwSEXP, SEXP ngSEXP, SEXP nSEXP, SEXP periodSEXP, SEXP jSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP YSEXP, SEXP lASEXP, SEXP tauxSEXP, SEXP nbetacumSEXP, SEXP nnucumSEXP, SEXP ndeltacumSEXP, SEXP lTCOVinitSEXP, SEXP ldeltainitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type period(periodSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nbeta(nbetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nnu(nnuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type lA(lASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type taux(tauxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nbetacum(nbetacumSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nnucum(nnucumSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type ndeltacum(ndeltacumSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type lTCOVinit(lTCOVinitSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type ldeltainit(ldeltainitSEXP);
    rcpp_result_gen = Rcpp::wrap(EMZIPparam(beta, nu, nw, ng, n, period, j, nbeta, nnu, Y, lA, taux, nbetacum, nnucum, ndeltacum, lTCOVinit, ldeltainit));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_EMZIPparam(SEXP betaSEXP, SEXP nuSEXP, SEXP nwSEXP, SEXP ngSEXP, SEXP nSEXP, SEXP periodSEXP, SEXP jSEXP, SEXP nbetaSEXP, SEXP nnuSEXP, SEXP YSEXP, SEXP lASEXP, SEXP tauxSEXP, SEXP nbetacumSEXP, SEXP nnucumSEXP, SEXP ndeltacumSEXP, SEXP lTCOVinitSEXP, SEXP ldeltainitSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_EMZIPparam_try(betaSEXP, nuSEXP, nwSEXP, ngSEXP, nSEXP, periodSEXP, jSEXP, nbetaSEXP, nnuSEXP, YSEXP, lASEXP, tauxSEXP, nbetacumSEXP, nnucumSEXP, ndeltacumSEXP, lTCOVinitSEXP, ldeltainitSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// EMMult_cpp
List EMMult_cpp(List lparam, List lng, List lnx, List lnbeta, List lnnu, List ln, List lA, List lY, List lX, List lymin, List lymax, Nullable<List> lTCOVinit, List lnw, arma::mat mk, arma::vec vp, std::vector<std::string> model, int itermax, bool EMIRLS);
static SEXP _trajeR_EMMult_cpp_try(SEXP lparamSEXP, SEXP lngSEXP, SEXP lnxSEXP, SEXP lnbetaSEXP, SEXP lnnuSEXP, SEXP lnSEXP, SEXP lASEXP, SEXP lYSEXP, SEXP lXSEXP, SEXP lyminSEXP, SEXP lymaxSEXP, SEXP lTCOVinitSEXP, SEXP lnwSEXP, SEXP mkSEXP, SEXP vpSEXP, SEXP modelSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type lparam(lparamSEXP);
    Rcpp::traits::input_parameter< List >::type lng(lngSEXP);
    Rcpp::traits::input_parameter< List >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< List >::type lnbeta(lnbetaSEXP);
    Rcpp::traits::input_parameter< List >::type lnnu(lnnuSEXP);
    Rcpp::traits::input_parameter< List >::type ln(lnSEXP);
    Rcpp::traits::input_parameter< List >::type lA(lASEXP);
    Rcpp::traits::input_parameter< List >::type lY(lYSEXP);
    Rcpp::traits::input_parameter< List >::type lX(lXSEXP);
    Rcpp::traits::input_parameter< List >::type lymin(lyminSEXP);
    Rcpp::traits::input_parameter< List >::type lymax(lymaxSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type lTCOVinit(lTCOVinitSEXP);
    Rcpp::traits::input_parameter< List >::type lnw(lnwSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mk(mkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vp(vpSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< bool >::type EMIRLS(EMIRLSSEXP);
    rcpp_result_gen = Rcpp::wrap(EMMult_cpp(lparam, lng, lnx, lnbeta, lnnu, ln, lA, lY, lX, lymin, lymax, lTCOVinit, lnw, mk, vp, model, itermax, EMIRLS));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _trajeR_EMMult_cpp(SEXP lparamSEXP, SEXP lngSEXP, SEXP lnxSEXP, SEXP lnbetaSEXP, SEXP lnnuSEXP, SEXP lnSEXP, SEXP lASEXP, SEXP lYSEXP, SEXP lXSEXP, SEXP lyminSEXP, SEXP lymaxSEXP, SEXP lTCOVinitSEXP, SEXP lnwSEXP, SEXP mkSEXP, SEXP vpSEXP, SEXP modelSEXP, SEXP itermaxSEXP, SEXP EMIRLSSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_trajeR_EMMult_cpp_try(lparamSEXP, lngSEXP, lnxSEXP, lnbetaSEXP, lnnuSEXP, lnSEXP, lASEXP, lYSEXP, lXSEXP, lyminSEXP, lymaxSEXP, lTCOVinitSEXP, lnwSEXP, mkSEXP, vpSEXP, modelSEXP, itermaxSEXP, EMIRLSSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _trajeR_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*gkBETA_cpp)(List,List,int,int,IntegerVector,IntegerVector,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,Nullable<List>,int)");
        signatures.insert("NumericVector(*difLBETA_cpp)(NumericVector,int,int,IntegerVector,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,int)");
        signatures.insert("double(*LikelihoodBETA_cpp)(NumericVector,int,int,IntegerVector,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,int)");
        signatures.insert("double(*gkCNORM_cpp)(List,NumericVector,int,int,IntegerVector,NumericMatrix,NumericMatrix,double,double,Nullable<NumericMatrix>,Nullable<List>,int)");
        signatures.insert("NumericVector(*difLbetakalpha_cpp)(NumericVector,List,NumericVector,Nullable<List>,int,int,int,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,double,double,Nullable<NumericMatrix>,int)");
        signatures.insert("double(*difLsigmaalphaunique_cpp)(NumericVector,List,NumericVector,Nullable<List>,int,int,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,double,double,Nullable<NumericMatrix>,int)");
        signatures.insert("NumericVector(*difLalpha_cpp)(NumericVector,int,int,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,double,double,Nullable<NumericMatrix>,int,bool)");
        signatures.insert("NumericVector(*difLalphaunique_cpp)(NumericVector,int,int,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,double,double,Nullable<NumericMatrix>,int,bool)");
        signatures.insert("double(*Likelihoodalpha_cpp)(NumericVector,int,int,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,double,double,Nullable<NumericMatrix>,int,bool)");
        signatures.insert("double(*likelihoodCNORM_cpp)(NumericVector,int,int,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,double,double,Nullable<NumericMatrix>,int)");
        signatures.insert("double(*likelihoodEM_cpp)(int,int,IntegerVector,NumericVector,NumericVector,NumericVector,NumericMatrix,NumericMatrix,double,double,Nullable<NumericMatrix>,Nullable<NumericVector>,int)");
        signatures.insert("NumericMatrix(*ftauxCNORM_cpp)(NumericVector,NumericVector,NumericVector,int,IntegerVector,int,NumericMatrix,NumericMatrix,double,double,Nullable<NumericMatrix>,Nullable<NumericVector>,int,int,NumericMatrix)");
        signatures.insert("NumericVector(*EM_cpp)(NumericVector,int,int,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,double,double,Nullable<NumericMatrix>,int,int,bool,int)");
        signatures.insert("NumericVector(*EMSigmaunique_cpp)(NumericVector,int,int,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,double,double,Nullable<NumericMatrix>,int,int,bool,int)");
        signatures.insert("NumericVector(*EMCensored_cpp)(NumericVector,int,int,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,double,double,Nullable<NumericMatrix>,int,int,bool,int)");
        signatures.insert("NumericVector(*EMCensoredSigmaunique_cpp)(NumericVector,int,int,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,double,double,Nullable<NumericMatrix>,int,int,bool,int)");
        signatures.insert("double(*piikIntern_cpp)(NumericVector,int,int,int,NumericMatrix)");
        signatures.insert("NumericVector(*muikt_cpp)(NumericVector,int,int,int,NumericMatrix,Nullable<NumericMatrix>,Nullable<List>,int,int)");
        signatures.insert("double(*ftheta_cpp)(NumericVector,NumericMatrix,NumericMatrix,int,int,int)");
        signatures.insert("NumericVector(*difftheta_cpp)(NumericVector,NumericMatrix,NumericMatrix,int,int,int)");
        signatures.insert("Rcpp::NumericVector(*thethaIRLS_cpp)(Rcpp::NumericVector,int,int,Rcpp::NumericMatrix,arma::mat,int)");
        signatures.insert("NumericVector(*findtheta_cpp)(NumericVector,NumericMatrix,NumericMatrix,int,int,int,int,bool,int)");
        signatures.insert("double(*gkLOGIT_cpp)(List,int,int,IntegerVector,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,Nullable<List>,int)");
        signatures.insert("NumericVector(*difLLOGIT_cpp)(NumericVector,int,int,int,IntegerVector,NumericMatrix,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,int)");
        signatures.insert("double(*likelihoodLOGIT_cpp)(NumericVector,int,int,int,IntegerVector,NumericMatrix,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,int)");
        signatures.insert("NumericMatrix(*ftauxLOGIT_cpp)(NumericVector,NumericVector,int,IntegerVector,int,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,Nullable<NumericVector>,int,int,NumericMatrix)");
        signatures.insert("double(*likelihoodEMLOGIT_cpp)(int,int,IntegerVector,NumericVector,NumericVector,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,Nullable<NumericVector>,int)");
        signatures.insert("NumericVector(*EMLOGIT_cpp)(NumericVector,int,int,int,IntegerVector,NumericMatrix,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,int,int,bool,int)");
        signatures.insert("NumericVector(*EMLOGITIRLS_cpp)(NumericVector,int,int,int,IntegerVector,NumericMatrix,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,int,int,bool,int)");
        signatures.insert("double(*gkPois_cpp)(List,int,int,IntegerVector,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,Nullable<List>,int)");
        signatures.insert("NumericVector(*difLbetakPois_cpp)(NumericVector,List,Nullable<List>,int,int,int,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,int)");
        signatures.insert("NumericVector(*difLPois_cpp)(NumericVector,int,int,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,int)");
        signatures.insert("double(*likelihoodPois_cpp)(NumericVector,int,int,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,int)");
        signatures.insert("double(*gkZIP_cpp)(List,List,int,int,IntegerVector,IntegerVector,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,Nullable<List>,int)");
        signatures.insert("NumericVector(*difLZIP_cpp)(NumericVector,int,int,IntegerVector,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,int)");
        signatures.insert("double(*likelihoodZIP_cpp)(NumericVector,int,int,IntegerVector,IntegerVector,int,NumericMatrix,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,int)");
        signatures.insert("double(*likelihoodEMZIP_cpp)(int,int,IntegerVector,IntegerVector,NumericVector,NumericVector,NumericVector,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,Nullable<NumericVector>,int)");
        signatures.insert("NumericMatrix(*ftauxZIP_cpp)(NumericVector,NumericVector,NumericVector,int,IntegerVector,IntegerVector,int,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,Nullable<NumericVector>,int,int,NumericMatrix)");
        signatures.insert("NumericVector(*EMZIP_cpp)(NumericVector,int,int,int,IntegerVector,IntegerVector,NumericMatrix,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,int,int,bool,int)");
        signatures.insert("NumericVector(*EMZIPIRLS_cpp)(NumericVector,int,int,int,IntegerVector,IntegerVector,NumericMatrix,NumericMatrix,NumericMatrix,Nullable<NumericMatrix>,int,int,bool,int)");
        signatures.insert("List(*convtolist_cpp)(arma::vec,arma::vec)");
        signatures.insert("arma::mat(*mPsi_cpp)(arma::vec,List)");
        signatures.insert("double(*piikMult_cpp)(List,arma::mat,int,arma::vec,List,List,arma::mat)");
        signatures.insert("double(*densityChoice_cpp)(List,Nullable<NumericVector>,int,int,IntegerVector,NumericMatrix,NumericMatrix,double,double,Nullable<NumericMatrix>,Nullable<List>,int,Nullable<List>,Nullable<IntegerVector>,std::string)");
        signatures.insert("double(*likelihoodMult_cpp)(arma::vec,List,List,List,List,List,List,List,List,List,Nullable<List>,List,arma::vec,arma::mat,List,std::vector<std::string>)");
        signatures.insert("arma::rowvec(*difLalphaMult_cpp)(arma::vec,List,List,List,List,List,List,List,List,List,Nullable<List>,List,arma::vec,arma::mat,List,std::vector<std::string>)");
        signatures.insert("List(*ftauxPiikMult_cpp)(List,arma::mat,List,Nullable<List>,List,List,List,List,List,List,List,Nullable<List>,List,List,List,List,arma::mat,arma::vec,Nullable<List>,Nullable<List>,std::vector<std::string>)");
        signatures.insert("double(*likelihoodMultEM_cpp)(List,arma::mat,List,Nullable<List>,List,List,List,List,List,List,List,List,List,Nullable<List>,List,List,arma::mat,arma::mat,arma::vec,Nullable<List>,Nullable<List>,std::vector<std::string>)");
        signatures.insert("List(*EMCNORMparam)(arma::vec,int,int,int,int,int,arma::vec,arma::mat,List,arma::mat,arma::vec,Nullable<List>,Nullable<List>)");
        signatures.insert("List(*EMLOGITparam)(arma::vec,int,int,int,int,int,arma::vec,arma::mat,List,arma::mat,arma::vec,Nullable<List>,Nullable<List>)");
        signatures.insert("List(*EMZIPparam)(arma::vec,arma::vec,int,int,int,int,int,arma::vec,arma::vec,arma::mat,List,arma::mat,arma::vec,arma::vec,Nullable<IntegerVector>,Nullable<List>,Nullable<List>)");
        signatures.insert("List(*EMMult_cpp)(List,List,List,List,List,List,List,List,List,List,List,Nullable<List>,List,arma::mat,arma::vec,std::vector<std::string>,int,bool)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _trajeR_RcppExport_registerCCallable() { 
    R_RegisterCCallable("trajeR", "_trajeR_gkBETA_cpp", (DL_FUNC)_trajeR_gkBETA_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_difLBETA_cpp", (DL_FUNC)_trajeR_difLBETA_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_LikelihoodBETA_cpp", (DL_FUNC)_trajeR_LikelihoodBETA_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_gkCNORM_cpp", (DL_FUNC)_trajeR_gkCNORM_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_difLbetakalpha_cpp", (DL_FUNC)_trajeR_difLbetakalpha_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_difLsigmaalphaunique_cpp", (DL_FUNC)_trajeR_difLsigmaalphaunique_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_difLalpha_cpp", (DL_FUNC)_trajeR_difLalpha_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_difLalphaunique_cpp", (DL_FUNC)_trajeR_difLalphaunique_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_Likelihoodalpha_cpp", (DL_FUNC)_trajeR_Likelihoodalpha_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_likelihoodCNORM_cpp", (DL_FUNC)_trajeR_likelihoodCNORM_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_likelihoodEM_cpp", (DL_FUNC)_trajeR_likelihoodEM_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_ftauxCNORM_cpp", (DL_FUNC)_trajeR_ftauxCNORM_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_EM_cpp", (DL_FUNC)_trajeR_EM_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_EMSigmaunique_cpp", (DL_FUNC)_trajeR_EMSigmaunique_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_EMCensored_cpp", (DL_FUNC)_trajeR_EMCensored_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_EMCensoredSigmaunique_cpp", (DL_FUNC)_trajeR_EMCensoredSigmaunique_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_piikIntern_cpp", (DL_FUNC)_trajeR_piikIntern_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_muikt_cpp", (DL_FUNC)_trajeR_muikt_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_ftheta_cpp", (DL_FUNC)_trajeR_ftheta_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_difftheta_cpp", (DL_FUNC)_trajeR_difftheta_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_thethaIRLS_cpp", (DL_FUNC)_trajeR_thethaIRLS_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_findtheta_cpp", (DL_FUNC)_trajeR_findtheta_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_gkLOGIT_cpp", (DL_FUNC)_trajeR_gkLOGIT_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_difLLOGIT_cpp", (DL_FUNC)_trajeR_difLLOGIT_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_likelihoodLOGIT_cpp", (DL_FUNC)_trajeR_likelihoodLOGIT_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_ftauxLOGIT_cpp", (DL_FUNC)_trajeR_ftauxLOGIT_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_likelihoodEMLOGIT_cpp", (DL_FUNC)_trajeR_likelihoodEMLOGIT_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_EMLOGIT_cpp", (DL_FUNC)_trajeR_EMLOGIT_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_EMLOGITIRLS_cpp", (DL_FUNC)_trajeR_EMLOGITIRLS_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_gkPois_cpp", (DL_FUNC)_trajeR_gkPois_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_difLbetakPois_cpp", (DL_FUNC)_trajeR_difLbetakPois_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_difLPois_cpp", (DL_FUNC)_trajeR_difLPois_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_likelihoodPois_cpp", (DL_FUNC)_trajeR_likelihoodPois_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_gkZIP_cpp", (DL_FUNC)_trajeR_gkZIP_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_difLZIP_cpp", (DL_FUNC)_trajeR_difLZIP_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_likelihoodZIP_cpp", (DL_FUNC)_trajeR_likelihoodZIP_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_likelihoodEMZIP_cpp", (DL_FUNC)_trajeR_likelihoodEMZIP_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_ftauxZIP_cpp", (DL_FUNC)_trajeR_ftauxZIP_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_EMZIP_cpp", (DL_FUNC)_trajeR_EMZIP_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_EMZIPIRLS_cpp", (DL_FUNC)_trajeR_EMZIPIRLS_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_convtolist_cpp", (DL_FUNC)_trajeR_convtolist_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_mPsi_cpp", (DL_FUNC)_trajeR_mPsi_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_piikMult_cpp", (DL_FUNC)_trajeR_piikMult_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_densityChoice_cpp", (DL_FUNC)_trajeR_densityChoice_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_likelihoodMult_cpp", (DL_FUNC)_trajeR_likelihoodMult_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_difLalphaMult_cpp", (DL_FUNC)_trajeR_difLalphaMult_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_ftauxPiikMult_cpp", (DL_FUNC)_trajeR_ftauxPiikMult_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_likelihoodMultEM_cpp", (DL_FUNC)_trajeR_likelihoodMultEM_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_EMCNORMparam", (DL_FUNC)_trajeR_EMCNORMparam_try);
    R_RegisterCCallable("trajeR", "_trajeR_EMLOGITparam", (DL_FUNC)_trajeR_EMLOGITparam_try);
    R_RegisterCCallable("trajeR", "_trajeR_EMZIPparam", (DL_FUNC)_trajeR_EMZIPparam_try);
    R_RegisterCCallable("trajeR", "_trajeR_EMMult_cpp", (DL_FUNC)_trajeR_EMMult_cpp_try);
    R_RegisterCCallable("trajeR", "_trajeR_RcppExport_validate", (DL_FUNC)_trajeR_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_trajeR_gkBETA_cpp", (DL_FUNC) &_trajeR_gkBETA_cpp, 11},
    {"_trajeR_difLBETA_cpp", (DL_FUNC) &_trajeR_difLBETA_cpp, 11},
    {"_trajeR_LikelihoodBETA_cpp", (DL_FUNC) &_trajeR_LikelihoodBETA_cpp, 11},
    {"_trajeR_gkCNORM_cpp", (DL_FUNC) &_trajeR_gkCNORM_cpp, 12},
    {"_trajeR_difLbetakalpha_cpp", (DL_FUNC) &_trajeR_difLbetakalpha_cpp, 16},
    {"_trajeR_difLsigmaalphaunique_cpp", (DL_FUNC) &_trajeR_difLsigmaalphaunique_cpp, 15},
    {"_trajeR_difLalpha_cpp", (DL_FUNC) &_trajeR_difLalpha_cpp, 13},
    {"_trajeR_difLalphaunique_cpp", (DL_FUNC) &_trajeR_difLalphaunique_cpp, 13},
    {"_trajeR_Likelihoodalpha_cpp", (DL_FUNC) &_trajeR_Likelihoodalpha_cpp, 13},
    {"_trajeR_likelihoodCNORM_cpp", (DL_FUNC) &_trajeR_likelihoodCNORM_cpp, 12},
    {"_trajeR_likelihoodEM_cpp", (DL_FUNC) &_trajeR_likelihoodEM_cpp, 13},
    {"_trajeR_ftauxCNORM_cpp", (DL_FUNC) &_trajeR_ftauxCNORM_cpp, 15},
    {"_trajeR_EM_cpp", (DL_FUNC) &_trajeR_EM_cpp, 15},
    {"_trajeR_EMSigmaunique_cpp", (DL_FUNC) &_trajeR_EMSigmaunique_cpp, 15},
    {"_trajeR_EMCensored_cpp", (DL_FUNC) &_trajeR_EMCensored_cpp, 15},
    {"_trajeR_EMCensoredSigmaunique_cpp", (DL_FUNC) &_trajeR_EMCensoredSigmaunique_cpp, 15},
    {"_trajeR_IEM_cpp", (DL_FUNC) &_trajeR_IEM_cpp, 13},
    {"_trajeR_piikIntern_cpp", (DL_FUNC) &_trajeR_piikIntern_cpp, 5},
    {"_trajeR_muikt_cpp", (DL_FUNC) &_trajeR_muikt_cpp, 9},
    {"_trajeR_ftheta_cpp", (DL_FUNC) &_trajeR_ftheta_cpp, 6},
    {"_trajeR_difftheta_cpp", (DL_FUNC) &_trajeR_difftheta_cpp, 6},
    {"_trajeR_thethaIRLS_cpp", (DL_FUNC) &_trajeR_thethaIRLS_cpp, 6},
    {"_trajeR_findtheta_cpp", (DL_FUNC) &_trajeR_findtheta_cpp, 9},
    {"_trajeR_IEMLOGIT_cpp", (DL_FUNC) &_trajeR_IEMLOGIT_cpp, 11},
    {"_trajeR_gkLOGIT_cpp", (DL_FUNC) &_trajeR_gkLOGIT_cpp, 9},
    {"_trajeR_difLLOGIT_cpp", (DL_FUNC) &_trajeR_difLLOGIT_cpp, 10},
    {"_trajeR_likelihoodLOGIT_cpp", (DL_FUNC) &_trajeR_likelihoodLOGIT_cpp, 10},
    {"_trajeR_ftauxLOGIT_cpp", (DL_FUNC) &_trajeR_ftauxLOGIT_cpp, 12},
    {"_trajeR_likelihoodEMLOGIT_cpp", (DL_FUNC) &_trajeR_likelihoodEMLOGIT_cpp, 10},
    {"_trajeR_EMLOGIT_cpp", (DL_FUNC) &_trajeR_EMLOGIT_cpp, 13},
    {"_trajeR_EMLOGITIRLS_cpp", (DL_FUNC) &_trajeR_EMLOGITIRLS_cpp, 13},
    {"_trajeR_gkPois_cpp", (DL_FUNC) &_trajeR_gkPois_cpp, 9},
    {"_trajeR_difLbetakPois_cpp", (DL_FUNC) &_trajeR_difLbetakPois_cpp, 13},
    {"_trajeR_difLPois_cpp", (DL_FUNC) &_trajeR_difLPois_cpp, 10},
    {"_trajeR_likelihoodPois_cpp", (DL_FUNC) &_trajeR_likelihoodPois_cpp, 10},
    {"_trajeR_gkZIP_cpp", (DL_FUNC) &_trajeR_gkZIP_cpp, 11},
    {"_trajeR_difLZIP_cpp", (DL_FUNC) &_trajeR_difLZIP_cpp, 11},
    {"_trajeR_likelihoodZIP_cpp", (DL_FUNC) &_trajeR_likelihoodZIP_cpp, 11},
    {"_trajeR_likelihoodEMZIP_cpp", (DL_FUNC) &_trajeR_likelihoodEMZIP_cpp, 12},
    {"_trajeR_ftauxZIP_cpp", (DL_FUNC) &_trajeR_ftauxZIP_cpp, 14},
    {"_trajeR_EMZIP_cpp", (DL_FUNC) &_trajeR_EMZIP_cpp, 14},
    {"_trajeR_EMZIPIRLS_cpp", (DL_FUNC) &_trajeR_EMZIPIRLS_cpp, 14},
    {"_trajeR_IEMZIP_cpp", (DL_FUNC) &_trajeR_IEMZIP_cpp, 12},
    {"_trajeR_convtolist_cpp", (DL_FUNC) &_trajeR_convtolist_cpp, 2},
    {"_trajeR_mPsi_cpp", (DL_FUNC) &_trajeR_mPsi_cpp, 2},
    {"_trajeR_piikMult_cpp", (DL_FUNC) &_trajeR_piikMult_cpp, 7},
    {"_trajeR_densityChoice_cpp", (DL_FUNC) &_trajeR_densityChoice_cpp, 15},
    {"_trajeR_likelihoodMult_cpp", (DL_FUNC) &_trajeR_likelihoodMult_cpp, 16},
    {"_trajeR_difLalphaMult_cpp", (DL_FUNC) &_trajeR_difLalphaMult_cpp, 16},
    {"_trajeR_ftauxPiikMult_cpp", (DL_FUNC) &_trajeR_ftauxPiikMult_cpp, 21},
    {"_trajeR_likelihoodMultEM_cpp", (DL_FUNC) &_trajeR_likelihoodMultEM_cpp, 22},
    {"_trajeR_EMCNORMparam", (DL_FUNC) &_trajeR_EMCNORMparam, 13},
    {"_trajeR_EMLOGITparam", (DL_FUNC) &_trajeR_EMLOGITparam, 13},
    {"_trajeR_EMZIPparam", (DL_FUNC) &_trajeR_EMZIPparam, 17},
    {"_trajeR_EMMult_cpp", (DL_FUNC) &_trajeR_EMMult_cpp, 18},
    {"_trajeR_RcppExport_registerCCallable", (DL_FUNC) &_trajeR_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_trajeR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
